;;;; ops.lisp

(in-package #:specops.wasm)

;; TRUNCATE > TRN, CONVERT > CNV, DEMOTE > DEMO, PROMOTE > PROM, REINTERPRET > REI, *RETURN_CALL_INDIRECT > *RCL_IND, *RETURN_CALL_REF > *RCL_REF,


(((    ) (#x0             ) (#x1              ) (#x2             ) (#x3               ) (#x4              ) (#x5           ) (#x6             ) (#x7           ) (#x8           ) (#x9           ) (#xA           ) (#xB           ) (#xC           ) (#xD           ) (#xE           ) (#xF            ))
 ((#x00) ()                 (:nop             ) (:block          ) (:loop             ) (:if              ) (:else         ) (:*try           ) (:*catch       ) (:*throw       ) (:*rethrow     ) (:*throw-ref   ) (:end          ) (:br           ) (:br-if        ) (:br-table     ) (:return        ))
 ((#x10) (:call           ) (:call-indirect   ) (:*return-call   ) (:*rcl-ind         ) (:*call-ref       ) (:*rcl-ref     ) ()                 ()               (:*delegate    ) (:*catch-all   ) (:drop         ) (:select       ) (:*select     t) ()               ()               (:*try-table    ))
 ((#x20) (:get       local) (:set        local) (:local       tee) (:get        global) (:set       global) (:get    *table) (:set      *table) ()               (:load      i32) (:load      i64) (:load      f32) (:load      f64) (:load8-s   i32) (:load8-u   i32) (:load16-s  i32) (:load16-u  *i32))
 ((#x30) (:load-s  i64   8) (:load-u   i64   8) (:load-s  i64  16) (:load-u    i64  16) (:load-s   i64  32) (:load-u i64 32) (:store       i32) (:store     i64) (:store     f32) (:store     f64) (:store i32   8) (:store i32  16) (:store i64   8) (:store i64  16) (:store i64  32) (:memory    size))
 ((#x40) (:memory     grow) (:const        i32) (:const       i64) (:const         f32) (:const        f64) (:eqz       i32) (:eq          i32) (:ne        i32) (:lt-s      i32) (:lt-u      i32) (:gt-s      i32) (:gt-u      i32) (:le-s      i32) (:le-u      i32) (:ge-s      i32) (:ge-u       i32))
 ((#x50) (:eqz         i64) (:eq           i64) (:ne          i64) (:lt-s          i64) (:lt-u         i64) (:gt-s      i64) (:gt-u        i64) (:le-s      i64) (:le-u      i64) (:ge-s      i64) (:ge-u      i64) (:eq        f32) (:ne        f32) (:lt        f32) (:gt        f32) (:le         f32))
 ((#x60) (:ge          f32) (:eq           f64) (:ne          f64) (:lt            f64) (:gt           f64) (:le        f64) (:ge          f64) (:clz       i32) (:ctz       i32) (:popcnt    i32) (:add       i32) (:sub       i32) (:mul       i32) (:div-s     i32) (:div-u     i32) (:rem-s      i32))
 ((#x70) (:rem-u       i32) (:and          i32) (:or          i32) (:xor           i32) (:shl          i32) (:shr-s     i32) (:shr-u       i32) (:rotl      i32) (:rotr      i32) (:clz       i64) (:ctz       i64) (:popcnt    i64) (:add       i64) (:sub       i64) (:mul       i64) (:div-s      i64))
 ((#x80) (:div-u       i64) (:rem-s        i64) (:rem-u       i64) (:and           i64) (:or           i64) (:xor       i64) (:shl         i64) (:shr-s     i64) (:shr-u     i64) (:rotl      i64) (:rotr      i64) (:abs       f32) (:neg       f32) (:ceil      f32) (:floor     f32) (:trn        f32))
 ((#x90) (:nearest     f32) (:sqrt         f32) (:add         f32) (:sub           f32) (:mul          f32) (:div       f32) (:min         f32) (:max       f32) (:copysign  f32) (:abs       f64) (:neg       f64) (:ceil      f64) (:floor     f64) (:trn       f64) (:nearest   f64) (:sqrt       f64))
 ((#xA0) (:add         f64) (:sub          f64) (:mul         f64) (:div           f64) (:min          f64) (:max       f64) (:copysign    f64) (:wrap  i32 i64) (:trn-s i32 f32) (:trn-u i32 f32) (:trn-s i32 f64) (:trn-u i32 f64) (:ext-s i64 i32) (:ext-u i64 i32) (:trn-s i64 f32) (:trn-u  i64 f32))
 ((#xB0) (:trn-s  i64  f64) (:trn-u    i64 f64) (:cnv-s   f32 i32) (:cnv-u     f32 i32) (:cnv-s    f32 i64) (:cnv-u f32 i64) (:dem     f32 f64) (:cnv-s f64 i32) (:cnv-u f64 i32) (:cnv-s f64 i64) (:cnv-u f64 i64) (:prm   f64 f32) (:rei   i32 f32) (:rei   i64 f64) (:rei   f32 i32) (:rei    f64 i64))
 ((#xC0) (:extend-s *i32 8) (:extend-s *i32 16) (:extend-s *i64 8) (:extend-s *i64  16) (:extend-s *i64 32) ()               ()                 ()               () () () () () () () ())
 ((#xD0) (:null       *ref) (:is-null     *ref) (:func       *ref) (:as-non-null  *ref) (:*br-on-null     ) (:eq       *ref) (:*br-on-non-null)                  () () () () () () () ()))

;; REPLACE_LANE > RPLANE, EXTRACT_LANE > EXLANE, RELAXED_NMADD > RXNMADD, RELAXED_SWIZZLE > RXSWIZ, RELAXED_LANESELECT > RXLSEL, RELAXED_MAX > RXMAX, RELAXED_MIN > RXMIN
;; RELAXED_MADD > RXMADD, RELAXED_TRUNC > RXTRUNC, NARROW > NRW, EXTEND_LOW > XTLO, EXTEND_HIGH > XTHI

(((    ) (#x0      ) (#x1             ) (#x2                 ) (#x3               ) (#x4              ) (#x5                     ) (#x6                     ) (#x7                ) (#x8                     ) (#x9                     ) (#xA                   ) (#xB                   ) (#xC                           ) (#xD                           ) (#xE                           ) (#xF                           ))
 ((:load       v128) (:load-s v128 8x8) (:load-u   v128   8x8) (:load-s  v128 16x4) (:load-u v128 16x4) (:load-s       v128  32x2) (:load-u       v128  32x2) (:load-splat  v128 8) (:load-splat   v128    16) (:load-splat   v128    32) (:load-splat v128    64) (:store            v128) (:const                    v128) (:shuffle                 i8x16) (:swizzle                 i8x16) (:splat                   i8x16))
 ((:splat     i16x8) (:splat     i32x4) (:splat         i64x2) (:splat       f32x4) (:splat      f64x2) (:exlane-s          i8x16) (:exlane-u          i8x16) (:rplane       i8x16) (:exlane-s          i16x8) (:exlane-u          i16x8) (:rplane          i16x8) (:exlane          i32x4) (:rplane                  i32x4) (:exlane                  i64x2) (:rplane                  i64x2) (:exlane                  f32x4))
 ((:rplane    f32x4) (:exlane    f64x2) (:rplane        f64x2) (:eq          i8x16) (:ne         i8x16) (:lt-s              i8x16) (:lt-u              i8x16) (:gt-s         i8x16) (:gt-u              i8x16) (:le-s              i8x16) (:le-u            i8x16) (:ge-s            i8x16) (:ge-u                    i8x16) (:eq                      i16x8) (:ne                      i16x8) (:lt-s                    i16x8))
 ((:lt-u      i16x8) (:gt-s      i16x8) (:gt-u          i16x8) (:le-s        i16x8) (:le-u       i16x8) (:ge-s              i16x8) (:ge-u              i16x8) (:eq           i32x4) (:ne                i32x4) (:lt-s              i32x4) (:lt-u            i32x4) (:gt-s            i32x4) (:gt-u                    i32x4) (:le-s                    i32x4) (:le-u                    i32x4) (:ge-s                    i32x4))
 ((:ge-u      i32x4) (:eq        f32x4) (:ne            f32x4) (:lt          f32x4) (:gt         f32x4) (:le                f32x4) (:ge                f32x4) (:eq           f64x2) (:ne                f64x2) (:lt                f64x2) (:gt              f64x2) (:le              f64x2) (:ge                      f64x2) (:not                      v128) (:and                      v128) (:andnot                   v128))
 ((:or         v128) (:xor        v128) (:bitselect      v128) (:any-true     v128) (:load-lane v128 8) (:load-lane    v128    16) (:load-lane    v128    32) (:load-lane  v128 64) (:store-lane   v128     8) (:store-lane   v128    16) (:store-lane v128    32) (:store-lane v128    64) (:load-zero          v128    32) (:load-zero          v128    64) (:demote-zero       f32x4 f64x2) (:promote-low       f64x2 f32x4))
 ((:abs       i8x16) (:neg       i8x16) (:popcnt        i8x16) (:all-true    i8x16) (:bitmask    i8x16) (:nrw-s       i8x16 i16x8) (:nrw-u       i8x16 i16x8) (:ceil         f32x4) (:floor             f32x4) (:trunc             f32x4) (:nearest         f32x4) (:shl             i8x16) (:shr-s                   i8x16) (:shr-u                   i8x16) (:add                     i8x16) (:add-sat-s               i8x16))
 ((:add-sat-u i8x16) (:sub       i8x16) (:sub-sat-s     i8x16) (:sub-sat-u   i8x16) (:ceil       f64x2) (:floor             f64x2) (:min-s             i8x16) (:min-u        i8x16) (:max-s             i8x16) (:max-u             i8x16) (:trunc           f64x2) (:avgr-u          i8x16) (:extadd-pairwise-s i16x8 i8x16) (:extadd-pairwise-u i16x8 i8x16) (:extadd-pairwise-s i32x4 i16x8) (:extadd-pairwise-u i32x4 i16x8))
 ((:abs       i16x8) (:neg       i16x8) (:q15mulr-sat-s i16x8) (:all-true    i16x8) (:bitmask    i16x8) (:nrw-s       i16x8 i32x4) (:nrw-u       i16x8 i32x4) (:xtlo-s i16x8 i8x16) (:xthi-s      i16x8 i8x16) (:xtlo-u      i16x8 i8x16) (:xthi-u    i16x8 i8x16) (:shl             i16x8) (:shr-s                   i16x8) (:shr-u                   i16x8) (:add                     i16x8) (:add-sat-s               i16x8))
 ((:add-sat-u i16x8) (:sub       i16x8) (:sub-sat-s     i16x8) (:sub-sat-u   i16x8) (:nearest    f64x2) (:mul               i16x8) (:min-s             i16x8) (:min-u        i16x8) (:max-s             i16x8) (:max-u             i16x8) ()                       (:avgr-u          i16x8) (:extmul-low-s      i16x8 i8x16) (:extmul-high-s     i16x8 i8x16) (:extmul-low-u      i16x8 i8x16) (:extmul-high-u     i16x8 i8x16))
 ((:abs       i32x4) (:neg       i32x4) (:rxswiz       *i8x16) (:all-true    i32x4) (:bitmask    i32x4) (:rxtrunc-s  *i32x4 f32x4) (:rxtrunc-u  *i32x4 f32x4) (:xtlo-s i32x4 i16x8) (:xthi-s      i32x4 i16x8) (:xtlo-u      i32x4 i16x8) (:xthi-u    i32x4 i16x8) (:shl             i32x4) (:shr-s                   i32x4) (:shr-u                   i32x4) (:add                     i32x4) (:rxmadd                 *f32x4))
 ((:rxnmadd  *f32x4) (:sub       i32x4) (:rxlsel       *i8x16) (:rxlsel     *i16x8) (:rxmin     *f32x4) (:mul               i32x4) (:min-s             i32x4) (:min-u        i32x4) (:max-s             i32x4) (:max-u             i32x4) (:dot-s     i32x4 i16x8) ()                       (:extmul-low-s      i32x4 i16x8) (:extmul-high-s     i32x4 i16x8) (:extmul-low-u      i32x4 i16x8) (:extmul-high-u     i32x4 i16x8))
 ((:abs       i64x2) (:neg       i64x2) ()                     (:all-true    i64x2) (:bitmask    i64x2) (:rxtrunc-s0 *i32x4 f64x2) (:rxtrunc-u0 *i32x4 f64x2) (:xtlo-s i64x2 i32x4) (:xthi-s      i64x2 i32x4) (:xtlo-u      i64x2 i32x4) (:xthi-u    i64x2 i32x4) (:shl             i64x2) (:shr-s                   i64x2) (:shr-u                   i64x2) (:add                     i64x2) (:rxmadd                 *f64x2))
 ((:rxnmadd  *f64x2) (:sub       i64x2) (:rxlsel       *i32x4) (:rxlsel     *i64x2) (:rxmin     *f64x2) (:mul               i64x2) (:eq                i64x2) (:ne           i64x2) (:lt-s              i64x2) (:gt-s              i64x2) (:le-s            i64x2) (:ge-s            i64x2) (:extmul-low-s      i64x2 i32x4) (:extmul-high-s     i64x2 i32x4) (:extmul-low-u      i64x2 i32x4) (:extmul-high-u     i64x2 i32x4))
 ((:abs       f32x4) (:neg       f32x4) (:relaxed-max  *f32x4) (:sqrt        f32x4) (:add        f32x4) (:sub               f32x4) (:mul               f32x4) (:div          f32x4) (:min               f32x4) (:max               f32x4) (:pmin            f32x4) (:pmax            f32x4) (:abs                     f64x2) (:neg                     f64x2) (:relaxed-max            *f64x2) (:sqrt                    f64x2))
 ((:add       f64x2) (:sub       f64x2) (:mul           f64x2) (:div         f64x2) (:min        f64x2) (:max               f64x2) (:pmin              f64x2) (:pmax         f64x2) (:trunc-sat-s i32x4 f32x4) (:trunc-sat-u i32x4 f32x4) (:convert-s f32x4 i32x4) (:convert-u f32x4 i32x4) (:trunc-sat-s0      i32x4 f64x2) (:trunc-sat-u0      i32x4 f64x2) (:convert-low-s      f64x i32x4) (:convert-low-u     f64x2 i32x4)))
