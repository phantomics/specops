;;;; ops.lisp

(in-package #:specops.wasm)

;; TRUNCATE > TRN, CONVERT > CNV, DEMOTE > DEMO, PROMOTE > PROM, REINTERPRET > REI, *RETURN_CALL_INDIRECT > *RCL_IND, *RETURN_CALL_REF > *RCL_REF,


(((    ) (#x0           ) (#x1           ) (#x2           ) (#x3           ) (#x4           ) (#x5           ) (#x6          ) (#x7           ) (#x8           ) (#x9           ) (#xA           ) (#xB           ) (#xC           ) (#xD           ) (#xE           ) (#xF           ))
 ((#x00) ()               (:nop          ) (:block        ) (:loop         ) (:if           ) (:else         ) (:*try        ) (:*catch       ) (:*throw       ) (:*rethrow     ) (:*throw_ref   ) (:end          ) (:br           ) (:br_if        ) (:br_table     ) (:return       ))
 ((#x10) (:call         ) (:call_indirect) (:*return_call ) (:*rcl_ind     ) (:*call_ref    ) (:*rcl_ref     ) ()              ()               (:*delegate    ) (:*catch_all   ) (:drop         ) (:select       ) (:*select     t) ()               ()               (:*try_table   ))
 ((#x20) (:local     get) (:local     set) (:local     tee) (:global    get) (:global    set) (:*table    get) (:*table   set) ()               (:load      i32) (:load      i64) (:load      f32) (:load      f64) (:load8_s   i32) (:load8_u   i32) (:load16_s  i32) (:load16_u  i32))
 ((#x30) (:load8_s   i64) (:load8_u   i64) (:load16_s  i64) (:load16_u  i64) (:load32_s  i64) (:load32_u  i64) (:store    i32) (:store     i64) (:store     f32) (:store     f64) (:store8    i32) (:store16   i32) (:store8    i64) (:store16   i64) (:store32   i64) (:memory size  ))
 ((#x40) (:memory   grow) (:const     i32) (:const     i64) (:const     f32) (:const     f64) (:eqz       i32) (:eq       i32) (:ne        i32) (:lt_s      i32) (:lt_u      i32) (:gt_s      i32) (:gt_u      i32) (:le_s      i32) (:le_u      i32) (:ge_s      i32) (:ge_u      i32))
 ((#x50) (:eqz       i64) (:eq        i64) (:ne        i64) (:lt_s      i64) (:lt_u      i64) (:gt_s      i64) (:gt_u     i64) (:le_s      i64) (:le_u      i64) (:ge_s      i64) (:ge_u      i64) (:eq        f32) (:ne        f32) (:lt        f32) (:gt        f32) (:le        f32))
 ((#x60) (:ge        f32) (:eq        f64) (:ne        f64) (:lt        f64) (:gt        f64) (:le        f64) (:ge       f64) (:clz       i32) (:ctz       i32) (:popcnt    i32) (:add       i32) (:sub       i32) (:mul       i32) (:div_s     i32) (:div_u     i32) (:rem_s     i32))
 ((#x70) (:rem_u     i32) (:and       i32) (:or        i32) (:xor       i32) (:shl       i32) (:shr_s     i32) (:shr_u    i32) (:rotl      i32) (:rotr      i32) (:clz       i64) (:ctz       i64) (:popcnt    i64) (:add       i64) (:sub       i64) (:mul       i64) (:div_s     i64))
 ((#x80) (:div_u     i64) (:rem_s     i64) (:rem_u     i64) (:and       i64) (:or        i64) (:xor       i64) (:shl      i64) (:shr_s     i64) (:shr_u     i64) (:rotl      i64) (:rotr      i64) (:abs       f32) (:neg       f32) (:ceil      f32) (:floor     f32) (:trn       f32))
 ((#x90) (:nearest   f32) (:sqrt      f32) (:add       f32) (:sub       f32) (:mul       f32) (:div       f32) (:min      f32) (:max       f32) (:copysign  f32) (:abs       f64) (:neg       f64) (:ceil      f64) (:floor     f64) (:trn       f64) (:nearest   f64) (:sqrt      f64))
 ((#xA0) (:add       f64) (:sub       f64) (:mul       f64) (:div       f64) (:min       f64) (:max       f64) (:copysign f64) (:wrap_i64  i32) (:trn_f32_s i32) (:trn_f32_u i32) (:trn_f64_s i32) (:trn_f64_u i32) (:ext_i32_s i64) (:ext_i32_u i64) (:trn_f32_s i64) (:trn_f32_u i64))
 ((#xB0) (:trn_f64_s i64) (:trn_f64_u i64) (:cnv_i32_s f32) (:cnv_i32_u f32) (:cnv_i64_s f32) (:cnv_i64_u f32) (:dem_f64  f32) (:cnv_i32_s f64) (:cnv_i32_u f64) (:cnv_i64_s f64) (:cnv_i64_u f64) (:prm_f32   f64) (:rei_f32   i32) (:rei_f64   i64) (:rei_i32   f32) (:rei_i64   f64))
 ((#xC0) (:extend8_s *i32) (:extend16_s *i32) (:extend8_s *i64) (:extend16_s *i64) (:extend32_s *i64) (:nil) (:nil) (:nil) (:nil) (:nil) (:nil) (:nil) (:nil) (:nil) (:nil) (:nil))
 ((#xD0) (:*ref      null) (:*ref is_null) (:*ref func) (:*ref as_non_null) (:*br_on_null) (:*ref eq) (:*br_on_non_null) (:nil) (:nil) (:nil) (:nil) (:nil) (:nil) (:nil) (:nil) (:nil)))

;; REPLACE_LANE > RPLANE, EXTRACT_LANE > EXLANE, RELAXED_NMADD > RXNMADD, RELAXED_SWIZZLE > RXSWIZ, RELAXED_LANESELECT > RXLSEL, RELAXED_MAX > RXMAX, RELAXED_MIN > RXMIN
;; RELAXED_MADD > RXMADD, RELAXED_TRUNC > RXTRUNC, NARROW > NRW, EXTEND_LOW > XTLO, EXTEND_HIGH > XTHI

(((:LOAD       V128) (:LOAD8X8_S V128) (:LOAD8X8_U  V128) (:LOAD16X4_S    V128) (:LOAD16X4_U V128) (:LOAD32X2_S        V128) (:LOAD32X2_U   V128) (:LOAD8_SPLAT   V128) (:LOAD16_SPLAT       V128) (:LOAD32_SPLAT  V128) (:LOAD64_SPLAT  V128) (:STORE        V128) (:CONST       V128) (:SHUFFLE I8X16) (:SWIZZLE I8X16) (:SPLAT I8X16))
 ((:SPLAT     I16X8) (:SPLAT    I32X4) (:SPLAT     I64X2) (:SPLAT        F32X4) (:SPLAT     F64X2) (:EXLANE_S         I8X16) (:EXLANE_U    I8X16) (:RPLANE       I8X16) (:EXLANE_S          I16X8) (:EXLANE_U     I16X8) (:RPLANE       I16X8) (:EXLANE      I32X4) (:RPLANE     I32X4) (:EXLANE I64X2) (:RPLANE I64X2) (:EXLANE F32X4))
 ((:RPLANE    F32X4) (:EXLANE   F64X2) (:RPLANE    F64X2) (:EQ           I8X16) (:NE        I8X16) (:LT_S             I8X16) (:LT_U        I8X16) (:GT_S         I8X16) (:GT_U              I8X16) (:LE_S         I8X16) (:LE_U         I8X16) (:GE_S        I8X16) (:GE_U       I8X16) (:EQ I16X8) (:NE I16X8) (:LT_S I16X8))
 ((:LT_U      I16X8) (:GT_S     I16X8) (:GT_U      I16X8) (:LE_S         I16X8) (:LE_U      I16X8) (:GE_S             I16X8) (:GE_U        I16X8) (:EQ           I32X4) (:NE                I32X4) (:LT_S         I32X4) (:LT_U         I32X4) (:GT_S        I32X4) (:GT_U       I32X4) (:LE_S I32X4) (:LE_U I32X4) (:GE_S I32X4))
 ((:GE_U      I32X4) (:EQ       F32X4) (:NE        F32X4) (:LT           F32X4) (:GT        F32X4) (:LE               F32X4) (:GE          F32X4) (:EQ           F64X2) (:NE                F64X2) (:LT           F64X2) (:GT           F64X2) (:LE          F64X2) (:GE         F64X2) (:NOT V128) (:AND V128) (:ANDNOT V128))
 ((:OR         V128) (:XOR       V128) (:BITSELECT  V128) (:ANY_TRUE      V128) (:LOAD8_LANE V128) (:LOAD16_LANE       V128) (:LOAD32_LANE  V128) (:LOAD64_LANE   V128) (:STORE8_LANE        V128) (:STORE16_LANE  V128) (:STORE32_LANE  V128) (:STORE64_LANE V128) (:LOAD32_ZERO V128) (:LOAD64_ZERO V128) (:DEMOTE_F64X2_ZERO F32X4) (:PROMOTE_LOW_F32X4 F64X2))
 ((:ABS       I8X16) (:NEG      I8X16) (:POPCNT    I8X16) (:ALL_TRUE     I8X16) (:BITMASK   I8X16) (:NRW_I16X8_S      I8X16) (:NRW_I16X8_U I8X16) (:CEIL         F32X4) (:FLOOR             F32X4) (:TRUNC        F32X4) (:NEAREST      F32X4) (:SHL         I8X16) (:SHR_S      I8X16) (:SHR_U I8X16) (:ADD I8X16) (:ADD_SAT_S I8X16))
 ((:ADD_SAT_U I8X16) (:SUB      I8X16) (:SUB_SAT_S I8X16) (:SUB_SAT_U    I8X16) (:CEIL      F64X2) (:FLOOR            F64X2) (:MIN_S       I8X16) (:MIN_U        I8X16) (:MAX_S             I8X16) (:MAX_U        I8X16) (:TRUNC        F64X2) (:AVGR_U      I8X16) (:EXTADD_PAIRWISE_I8X16_S I16X8) (:EXTADD_PAIRWISE_I8X16_U I16X8) (:EXTADD_PAIRWISE_I16X8_S I32X4) (:EXTADD_PAIRWISE_I16X8_U I32X4))
 ((:ABS       I16X8) (:NEG      I16X8) (:Q15MULR_SAT_S I16X8) (:ALL_TRUE I16X8) (:BITMASK   I16X8) (:NRW_I32X4_S      I16X8) (:NRW_I32X4_U I16X8) (:XTLO_I8X16_S I16X8) (:XTHI_I8X16_S      I16X8) (:XTLO_I8X16_U I16X8) (:XTHI_I8X16_U I16X8) (:SHL         I16X8) (:SHR_S      I16X8) (:SHR_U I16X8) (:ADD I16X8) (:ADD_SAT_S I16X8))
 ((:ADD_SAT_U I16X8) (:SUB      I16X8) (:SUB_SAT_S I16X8) (:SUB_SAT_U    I16X8) (:NEAREST   F64X2) (:MUL              I16X8) (:MIN_S       I16X8) (:MIN_U        I16X8) (:MAX_S             I16X8) (:MAX_U        I16X8) ()                    (:AVGR_U      I16X8) (:EXTMUL_LOW_I8X16_S I16X8) (:EXTMUL_HIGH_I8X16_S I16X8) (:EXTMUL_LOW_I8X16_U I16X8) (:EXTMUL_HIGH_I8X16_U I16X8))
 ((:ABS       I32X4) (:NEG      I32X4) (:RXSWIZ   *I8X16) (:ALL_TRUE     I32X4) (:BITMASK   I32X4) (:RXTRUNC_F32X4_S *I32X4) (:RXTRUNC_F32X4_U *I32X4) (:XTLO_I16X8_S I32X4) (:XTHI_I16X8_S I32X4) (:XTLO_I16X8_U I32X4) (:XTHI_I16X8_U I32X4) (:SHL         I32X4) (:SHR_S      I32X4) (:SHR_U I32X4) (:ADD I32X4) (:*F32X4 RXMADD))
 ((:RXNMADD  *F32X4) (:SUB      I32X4) (:RXLSEL   *I8X16) (:RXLSEL      *I16X8) (:RXMIN    *F32X4) (:MUL              I32X4) (:MIN_S       I32X4) (:MIN_U        I32X4) (:MAX_S             I32X4) (:MAX_U        I32X4) (:DOT_I16X8_S  I32X4) ()                   (:EXTMUL_LOW_I16X8_S I32X4) (:EXTMUL_HIGH_I16X8_S I32X4) (:EXTMUL_LOW_I16X8_U I32X4) (:EXTMUL_HIGH_I16X8_U I32X4))
 ((:ABS       I64X2) (:NEG      I64X2) ()                 (:ALL_TRUE     I64X2) (:BITMASK   I64X2) (:RXTRUNC_F64X2_S_ZERO *I32X4) (:RXTRUNC_F64X2_U_ZERO *I32X4) (:XTLO_I32X4_S I64X2) (:XTHI_I32X4_S I64X2) (:XTLO_I32X4_U I64X2) (:XTHI_I32X4_U I64X2) (:SHL I64X2) (:SHR_S    I64X2) (:SHR_U I64X2) (:ADD I64X2) (:*F64X2 RXMADD))
 ((:RXNMADD  *F64X2) (:SUB      I64X2) (:RXLSEL   *I32X4) (:RXLSEL      *I64X2) (:*F64X2    RXMIN) (:MUL              I64X2) (:EQ          I64X2) (:NE           I64X2) (:LT_S              I64X2) (:GT_S         I64X2) (:LE_S         I64X2) (:GE_S        I64X2) (:EXTMUL_LOW_I32X4_S I64X2) (:EXTMUL_HIGH_I32X4_S I64X2) (:EXTMUL_LOW_I32X4_U I64X2) (:EXTMUL_HIGH_I32X4_U I64X2))
 ((:ABS       F32X4) (:NEG      F32X4) (:RELAXED_MAX *F32X4) (:SQRT      F32X4) (:ADD       F32X4) (:SUB              F32X4) (:MUL         F32X4) (:DIV          F32X4) (:MIN               F32X4) (:MAX          F32X4) (:PMIN         F32X4) (:PMAX        F32X4) (:ABS        F64X2) (:NEG F64X2) (:*F64X2 RELAXED_MAX) (:SQRT F64X2))
 ((:ADD       F64X2) (:SUB      F64X2) (:MUL       F64X2) (:DIV          F64X2) (:MIN       F64X2) (:MAX              F64X2) (:PMIN        F64X2) (:PMAX         F64X2) (:TRUNC_SAT_F32X4_S I32X4) (:TRUNC_SAT_F32X4_U I32X4) (:CONVERT_I32X4_S F32X4) (:CONVERT_I32X4_U F32X4) (:TRUNC_SAT_F64X2_S_ZERO I32X4) (:TRUNC_SAT_F64X2_U_ZERO I32X4) (:CONVERT_LOW_I32X4_S F64X2) (:CONVERT_LOW_I32X4_U F64X2)))
