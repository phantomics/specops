;;;; ops.lisp

(in-package #:specops.z80)

(specops 0 (op0 &optional op1) *assembler-prototype-z80*
  ;; the main table of z80 instructions; this is permuted by replacing h, l, hl and (hl) operands to
  ;; manifest the DD__ and FD__ instruction tables expressing IX and IY operations
  ((:tabular :cross-adding :matcher match-ops))
  ((    ) (#x0       ) (#x1        ) (#x2        ) (#x3        ) (#x4        ) (#x5       ) (#x6        ) (#x7       ) (#x8       ) (#x9       ) (#xA        ) (#xB      ) (#xC        ) (#xD     ) (#xE        ) (#xF     ))
  ((#x00) (:nop      ) (:ld bc   xx) (:ld (bc)  a) (:inc     bc) (:inc      b) (:dec     b) (:ld     b x) (:rlca     ) (:ex af -af) (:add hl bc) (:ld  a (bc)) (:dec   bc) (:inc      c) (:dec   c) (:ld  c    x) (:rrca   ))
  ((#x10) (:djnz    x) (:ld de   xx) (:ld (de)  a) (:inc     de) (:inc      d) (:dec     d) (:ld     d x) (:rla      ) (:jr      x) (:add hl de) (:ld  a (de)) (:dec   de) (:inc      e) (:dec   e) (:ld  e    x) (:rra    ))
  ((#x20) (:jr   nz x) (:ld hl   xx) (:ld (xx) hl) (:inc     hl) (:inc      h) (:dec     h) (:ld     h x) (:daa      ) (:jr  z   x) (:add hl hl) (:ld hl (xx)) (:dec   hl) (:inc      l) (:dec   l) (:ld  l    x) (:cpl    ))
  ((#x30) (:jr   nc x) (:ld sp   xx) (:ld (xx)  a) (:inc     sp) (:inc   (hl)) (:dec  (hl)) (:ld  (hl) x) (:scf      ) (:jr  c   x) (:add hl sp) (:ld  a (xx)) (:dec   sp) (:inc      a) (:dec   a) (:ld  a    x) (:ccf    ))
  ((#x40) (:ld    b b) (:ld  b    c) (:ld    b  d) (:ld     b e) (:ld     b h) (:ld    b l) (:ld  b (hl)) (:ld    b a) (:ld  c   b) (:ld   c  c) (:ld  c    d) (:ld  c  e) (:ld    c  h) (:ld  c l) (:ld  c (hl)) (:ld  c a))
  ((#x50) (:ld    d b) (:ld  d    c) (:ld    d  d) (:ld     d e) (:ld     d h) (:ld    d l) (:ld  d (hl)) (:ld    d a) (:ld  e   b) (:ld   e  c) (:ld  e    d) (:ld  e  e) (:ld    e  h) (:ld  e l) (:ld  e (hl)) (:ld  e a))
  ((#x60) (:ld    h b) (:ld  h    c) (:ld    h  d) (:ld     h e) (:ld     h h) (:ld    h l) (:ld  h (hl)) (:ld    h a) (:ld  l   b) (:ld   l  c) (:ld  l    d) (:ld  l  e) (:ld    l  h) (:ld  l l) (:ld  l (hl)) (:ld  l a))
  ((#x70) (:ld (hl) b) (:ld (hl)  c) (:ld (hl)  d) (:ld  (hl) e) (:ld  (hl) h) (:ld (hl) l) (:halt      ) (:ld (hl) a) (:ld  a   b) (:ld   a  c) (:ld  a    d) (:ld  a  e) (:ld    a  h) (:ld  a l) (:ld  a (hl)) (:ld  a a))
  ((#x80) (:add   a b) (:add a    c) (:add   a  d) (:add    a e) (:add    a h) (:add   a l) (:add a (hl)) (:add   a a) (:adc a   b) (:adc  a  c) (:adc a    d) (:adc a  e) (:adc   a  h) (:adc a l) (:adc a (hl)) (:adc a a))
  ((#x90) (:sub     b) (:sub      c) (:sub      d) (:sub      e) (:sub      h) (:sub     l) (:sub   (hl)) (:sub     a) (:sbc a   b) (:sbc  a  c) (:sbc a    d) (:sbc a  e) (:sbc   a  h) (:sbc a l) (:sbc a (hl)) (:sbc a a))
  ((#xA0) (:and     b) (:and      c) (:and      d) (:and      e) (:and      h) (:and     l) (:and   (hl)) (:and     a) (:xor     b) (:xor     c) (:xor      d) (:xor    e) (:xor      h) (:xor   l) (:xor   (hl)) (:xor   a))
  ((#xB0) (:or      b) (:or       c) (:or       d) (:or       e) (:or       h) (:or      l) (:or    (hl)) (:or      a) (:cp      b) (:cp      c) (:cp       d) (:cp     e) (:cp       h) (:cp    l) (:cp    (hl)) (:cp    a))
  ((#xC0) (:ret    nz) (:pop     bc) (:jp   nz xx) (:jp      xx) (:call nz xx) (:push   bc) (:add    a x) (:rst   00h) (:ret     z) (:ret      ) (:jp  z   xx) ()          (:call  z xx) (:call xx) (:adc a    x) (:rst 08h))
  ((#xD0) (:ret    nc) (:pop     de) (:jp   nc xx) (:out (x)  a) (:call nc xx) (:push   de) (:sub      x) (:rst   10h) (:ret     c) (:exx      ) (:jp  c   xx) (:in a (x)) (:call  c xx) ()         (:sbc a    x) (:rst 18h))
  ((#xE0) (:ret    po) (:pop     hl) (:jp   po xx) (:ex (sp) hl) (:call po xx) (:push   hl) (:and      x) (:rst   20h) (:ret    pe) (:jp   (hl)) (:jp pe   xx) (:ex de hl) (:call pe xx) ()         (:xor      x) (:rst 28h))
  ((#xF0) (:ret     p) (:pop     af) (:jp    p xx) (:di        ) (:call  p xx) (:push   af) (:or       x) (:rst   30h) (:ret     m) (:ld  sp hl) (:jp  m   xx) (:ei      ) (:call  m xx) ()         (:cp       x) (:rst 38h)))

(specops #xCB (op0 &optional op1) *assembler-prototype-z80*
  ;; the CB__ table of z80 instructions
  ((:tabular :cross-adding :matcher match-ops))
  ((      ) (#x0     ) (#x1     ) (#x2     ) (#x3     ) (#x4     ) (#x5     ) (#x6        ) (#x7     ) (#x8     ) (#x9     ) (#xA     ) (#xB     ) (#xC     ) (#xD     ) (#xE        ) (#xF     ))
  ((#xCB00) (:rlc   b) (:rlc   c) (:rlc   d) (:rlc   e) (:rlc   h) (:rlc   l) (:rlc   (hl)) (:rlc   a) (:rrc   b) (:rrc   c) (:rrc   d) (:rrc   e) (:rrc   h) (:rrc   l) (:rrc   (hl)) (:rrc   a))
  ((#xCB10) (:rl    b) (:rl    c) (:rl    d) (:rl    e) (:rl    h) (:rl    l) (:rl    (hl)) (:rl    a) (:rr    b) (:rr    c) (:rr    d) (:rr    e) (:rr    h) (:rr    l) (:rr    (hl)) (:rr    a))
  ((#xCB20) (:sla   b) (:sla   c) (:sla   d) (:sla   e) (:sla   h) (:sla   l) (:sla   (hl)) (:sla   a) (:sra   b) (:sra   c) (:sra   d) (:sra   e) (:sra   h) (:sra   l) (:sra   (hl)) (:sra   a))
  ((#xCB30) (:sll   b) (:sll   c) (:sll   d) (:sll   e) (:sll   h) (:sll   l) (:sll   (hl)) (:sll   a) (:srl   b) (:srl   c) (:srl   d) (:srl   e) (:srl   h) (:srl   l) (:srl   (hl)) (:srl   a))
  ((#xCB40) (:bit 0 b) (:bit 0 c) (:bit 0 d) (:bit 0 e) (:bit 0 h) (:bit 0 l) (:bit 0 (hl)) (:bit 0 a) (:bit 1 b) (:bit 1 c) (:bit 1 d) (:bit 1 e) (:bit 1 h) (:bit 1 l) (:bit 1 (hl)) (:bit 1 a))
  ((#xCB50) (:bit 2 b) (:bit 2 c) (:bit 2 d) (:bit 2 e) (:bit 2 h) (:bit 2 l) (:bit 2 (hl)) (:bit 2 a) (:bit 3 b) (:bit 3 c) (:bit 3 d) (:bit 3 e) (:bit 3 h) (:bit 3 l) (:bit 3 (hl)) (:bit 3 a))
  ((#xCB60) (:bit 4 b) (:bit 4 c) (:bit 4 d) (:bit 4 e) (:bit 4 h) (:bit 4 l) (:bit 4 (hl)) (:bit 4 a) (:bit 5 b) (:bit 5 c) (:bit 5 d) (:bit 5 e) (:bit 5 h) (:bit 5 l) (:bit 5 (hl)) (:bit 5 a))
  ((#xCB70) (:bit 6 b) (:bit 6 c) (:bit 6 d) (:bit 6 e) (:bit 6 h) (:bit 6 l) (:bit 6 (hl)) (:bit 6 a) (:bit 7 b) (:bit 7 c) (:bit 7 d) (:bit 7 e) (:bit 7 h) (:bit 7 l) (:bit 7 (hl)) (:bit 7 a))
  ((#xCB80) (:res 0 b) (:res 0 c) (:res 0 d) (:res 0 e) (:res 0 h) (:res 0 l) (:res 0 (hl)) (:res 0 a) (:res 1 b) (:res 1 c) (:res 1 d) (:res 1 e) (:res 1 h) (:res 1 l) (:res 1 (hl)) (:res 1 a))
  ((#xCB90) (:res 2 b) (:res 2 c) (:res 2 d) (:res 2 e) (:res 2 h) (:res 2 l) (:res 2 (hl)) (:res 2 a) (:res 3 b) (:res 3 c) (:res 3 d) (:res 3 e) (:res 3 h) (:res 3 l) (:res 3 (hl)) (:res 3 a))
  ((#xCBA0) (:res 4 b) (:res 4 c) (:res 4 d) (:res 4 e) (:res 4 h) (:res 4 l) (:res 4 (hl)) (:res 4 a) (:res 5 b) (:res 5 c) (:res 5 d) (:res 5 e) (:res 5 h) (:res 5 l) (:res 5 (hl)) (:res 5 a))
  ((#xCBB0) (:res 6 b) (:res 6 c) (:res 6 d) (:res 6 e) (:res 6 h) (:res 6 l) (:res 6 (hl)) (:res 6 a) (:res 7 b) (:res 7 c) (:res 7 d) (:res 7 e) (:res 7 h) (:res 7 l) (:res 7 (hl)) (:res 7 a))
  ((#xCBC0) (:set 0 b) (:set 0 c) (:set 0 d) (:set 0 e) (:set 0 h) (:set 0 l) (:set 0 (hl)) (:set 0 a) (:set 1 b) (:set 1 c) (:set 1 d) (:set 1 e) (:set 1 h) (:set 1 l) (:set 1 (hl)) (:set 1 a))
  ((#xCBD0) (:set 2 b) (:set 2 c) (:set 2 d) (:set 2 e) (:set 2 h) (:set 2 l) (:set 2 (hl)) (:set 2 a) (:set 3 b) (:set 3 c) (:set 3 d) (:set 3 e) (:set 3 h) (:set 3 l) (:set 3 (hl)) (:set 3 a))
  ((#xCBE0) (:set 4 b) (:set 4 c) (:set 4 d) (:set 4 e) (:set 4 h) (:set 4 l) (:set 4 (hl)) (:set 4 a) (:set 5 b) (:set 5 c) (:set 5 d) (:set 5 e) (:set 5 h) (:set 5 l) (:set 5 (hl)) (:set 5 a))
  ((#xCBF0) (:set 6 b) (:set 6 c) (:set 6 d) (:set 6 e) (:set 6 h) (:set 6 l) (:set 6 (hl)) (:set 6 a) (:set 7 b) (:set 7 c) (:set 7 d) (:set 7 e) (:set 7 h) (:set 7 l) (:set 7 (hl)) (:set 7 a)))

 (specops #xED (op0 &optional op1) *assembler-prototype-z80*
  ;; the ED__ table of z80 instructions
  ((:tabular :cross-adding :matcher match-ops))
  ((      ) (#x0      ) (#x1       ) (#x2       ) (#x3        ) (#x4 ) (#x5  ) (#x6  ) (#x7     ) (#x8      ) (#x9       ) (#xA       ) (#xB        ) (#xC ) (#xD  ) (#xE  ) (#xF    ))
  ((#xED40) (:in b (c)) (:out (c) b) (:sbc hl bc) (:ld (xx) bc) (:neg) (:retn) (:im 0) (:ld  i a) (:in c (c)) (:out (c) c) (:adc hl bc) (:ld bc (xx)) (:neg) (:reti) ()      (:ld r a))
  ((#xED50) (:in d (c)) (:out (c) d) (:sbc hl de) (:ld (xx) de) (:neg) (:retn) (:im 1) (:ld  a i) (:in e (c)) (:out (c) e) (:adc hl de) (:ld de (xx)) (:neg) (:retn) (:im 2) (:ld a r))
  ((#xED60) (:in h (c)) (:out (c) h) (:sbc hl hl) (:ld (xx) hl) (:neg) (:retn) ()      (:rrd    ) (:in l (c)) (:out (c) l) (:adc hl hl) (:ld hl (xx)) (:neg) (:retn) ()      (:rld   ))
  ((#xED70) (:in f (c)) (:out (c) 0) (:sbc hl sp) (:ld (xx) sp) (:neg) (:retn) ()      ()         (:in a (c)) (:out (c) a) (:adc hl sp) (:ld sp (xx)) (:neg) (:reti) ()      ()       )
  ((#xEDA0) (:ldi     ) (:cpi      ) (:ini      ) (:outi      ) ()     ()      ()      ()         (:ldd     ) (:cpd      ) (:ind      ) (:outd      ) ()     ()      ()      ()       )
  ((#xEDB0) (:ldir    ) (:cpir     ) (:inir     ) (:otir      ) ()     ()      ()      ()         (:lddr    ) (:cpdr     ) (:indr     ) (:otdr      ) ()     ()      ()      ()       ))

;; (cb-logicop-specs (:rlc :rrc :rl :rr :sla :sra :sll :srl) (:b :c :d :e :h :l (:hl) :a))
;; (cb-bitop-specs   (:bit :res :set)                        (:b :c :d :e :h :l (:hl) :a))



;; (((:LOAD          V128) (:LOAD8X8_S     V128) (:LOAD8X8_U V128) (:LOAD16X4_S V128) (:LOAD16X4_U V128) (:LOAD32X2_S V128) (:LOAD32X2_U V128) (:LOAD8_SPLAT V128) (:LOAD16_SPLAT V128) (:LOAD32_SPLAT V128) (:LOAD64_SPLAT V128) (:STORE V128) (:CONST V128) (:SHUFFLE I8X16) (:SWIZZLE I8X16) (:SPLAT I8X16))
;;  ((:SPLAT        I16X8) (:SPLAT        I32X4) (:SPLAT I64X2) (:SPLAT F32X4) (:SPLAT F64X2) (:EXTRACT_LANE_S I8X16) (:EXTRACT_LANE_U I8X16) (:REPLACE_LANE I8X16) (:EXTRACT_LANE_S I16X8) (:EXTRACT_LANE_U I16X8) (:REPLACE_LANE I16X8) (:EXTRACT_LANE I32X4) (:REPLACE_LANE I32X4) (:EXTRACT_LANE I64X2) (:REPLACE_LANE I64X2) (:EXTRACT_LANE F32X4))
;;  ((:REPLACE_LANE F32X4) (:EXTRACT_LANE F64X2) (:REPLACE_LANE F64X2) (:EQ I8X16) (:NE I8X16) (:LT_S I8X16) (:LT_U I8X16) (:GT_S I8X16) (:GT_U I8X16) (:LE_S I8X16) (:LE_U I8X16) (:GE_S I8X16) (:GE_U I8X16) (:EQ I16X8) (:NE I16X8) (:LT_S I16X8))
;;  ((:LT_U         I16X8) (:GT_S         I16X8) (:GT_U I16X8) (:LE_S I16X8) (:LE_U I16X8) (:GE_S I16X8) (:GE_U I16X8) (:EQ I32X4) (:NE I32X4) (:LT_S I32X4) (:LT_U I32X4) (:GT_S I32X4) (:GT_U I32X4) (:LE_S I32X4) (:LE_U I32X4) (:GE_S I32X4))
;;  ((:GE_U         I32X4) (:EQ           F32X4) (:NE F32X4) (:LT F32X4) (:GT F32X4) (:LE F32X4) (:GE F32X4) (:EQ F64X2) (:NE F64X2) (:LT F64X2) (:GT F64X2) (:LE F64X2) (:GE F64X2) (:NOT V128) (:AND V128) (:ANDNOT V128))
;;  ((:OR            V128) (:XOR           V128) (:BITSELECT V128) (:ANY_TRUE V128) (:LOAD8_LANE V128) (:LOAD16_LANE V128) (:LOAD32_LANE V128) (:LOAD64_LANE V128) (:STORE8_LANE V128) (:STORE16_LANE V128) (:STORE32_LANE V128) (:STORE64_LANE V128) (:LOAD32_ZERO V128) (:LOAD64_ZERO V128) (:DEMOTE_F64X2_ZERO F32X4) (:PROMOTE_LOW_F32X4 F64X2))
;;  ((:ABS          I8X16) (:NEG          I8X16) (:POPCNT I8X16) (:ALL_TRUE I8X16) (:BITMASK I8X16) (:NARROW_I16X8_S I8X16) (:NARROW_I16X8_U I8X16) (:CEIL F32X4) (:FLOOR F32X4) (:TRUNC F32X4) (:NEAREST F32X4) (:SHL I8X16) (:SHR_S I8X16) (:SHR_U I8X16) (:ADD I8X16) (:ADD_SAT_S I8X16))
;;  ((:ADD_SAT_U    I8X16) (:SUB          I8X16) (:SUB_SAT_S I8X16) (:SUB_SAT_U I8X16) (:CEIL F64X2) (:FLOOR F64X2) (:MIN_S I8X16) (:MIN_U I8X16) (:MAX_S I8X16) (:MAX_U I8X16) (:TRUNC F64X2) (:AVGR_U I8X16) (:EXTADD_PAIRWISE_I8X16_S I16X8) (:EXTADD_PAIRWISE_I8X16_U I16X8) (:EXTADD_PAIRWISE_I16X8_S I32X4) (:EXTADD_PAIRWISE_I16X8_U I32X4))
;;  ((:ABS          I16X8) (:NEG          I16X8) (:Q15MULR_SAT_S I16X8) (:ALL_TRUE I16X8) (:BITMASK I16X8) (:NARROW_I32X4_S I16X8) (:NARROW_I32X4_U I16X8) (:EXTEND_LOW_I8X16_S I16X8) (:EXTEND_HIGH_I8X16_S I16X8) (:EXTEND_LOW_I8X16_U I16X8) (:EXTEND_HIGH_I8X16_U I16X8) (:SHL I16X8) (:SHR_S I16X8) (:SHR_U I16X8) (:ADD I16X8) (:ADD_SAT_S I16X8))
;;  ((:ADD_SAT_U    I16X8) (:SUB          I16X8) (:SUB_SAT_S I16X8) (:SUB_SAT_U I16X8) (:NEAREST F64X2) (:MUL I16X8) (:MIN_S I16X8) (:MIN_U I16X8) (:MAX_S I16X8) (:MAX_U I16X8) (:NIL NIL) (:AVGR_U I16X8) (:EXTMUL_LOW_I8X16_S I16X8) (:EXTMUL_HIGH_I8X16_S I16X8) (:EXTMUL_LOW_I8X16_U I16X8) (:EXTMUL_HIGH_I8X16_U I16X8))
;;  ((:ABS          I32X4) (:NEG          I32X4) (:*I8X16 RELAXED_SWIZZLE) (:ALL_TRUE I32X4) (:BITMASK I32X4) (:*I32X4 RELAXED_TRUNC_F32X4_S) (:*I32X4 RELAXED_TRUNC_F32X4_U) (:EXTEND_LOW_I16X8_S I32X4) (:EXTEND_HIGH_I16X8_S I32X4) (:EXTEND_LOW_I16X8_U I32X4) (:EXTEND_HIGH_I16X8_U I32X4) (:SHL I32X4) (:SHR_S I32X4) (:SHR_U I32X4) (:ADD I32X4) (:*F32X4 RELAXED_MADD))
;;  ((:RELAXED_NMADD *F32X4) (:SUB        I32X4) (:*I8X16 RELAXED_LANESELECT) (:*I16X8 RELAXED_LANESELECT) (:*F32X4 RELAXED_MIN) (:MUL I32X4) (:MIN_S I32X4) (:MIN_U I32X4) (:MAX_S I32X4) (:MAX_U I32X4) (:DOT_I16X8_S I32X4) (:NIL NIL) (:EXTMUL_LOW_I16X8_S I32X4) (:EXTMUL_HIGH_I16X8_S I32X4) (:EXTMUL_LOW_I16X8_U I32X4) (:EXTMUL_HIGH_I16X8_U I32X4))
;;  ((:ABS          I64X2) (:NEG          I64X2) (:NIL NIL) (:ALL_TRUE I64X2) (:BITMASK I64X2) (:*I32X4 RELAXED_TRUNC_F64X2_S_ZERO) (:*I32X4 RELAXED_TRUNC_F64X2_U_ZERO) (:EXTEND_LOW_I32X4_S I64X2) (:EXTEND_HIGH_I32X4_S I64X2) (:EXTEND_LOW_I32X4_U I64X2) (:EXTEND_HIGH_I32X4_U I64X2) (:SHL I64X2) (:SHR_S I64X2) (:SHR_U I64X2) (:ADD I64X2) (:*F64X2 RELAXED_MADD))
;;  ((:RELAXED_NMADD *F64X2) (:SUB        I64X2) (:*I32X4 RELAXED_LANESELECT) (:*I64X2 RELAXED_LANESELECT) (:*F64X2 RELAXED_MIN) (:MUL I64X2) (:EQ I64X2) (:NE I64X2) (:LT_S I64X2) (:GT_S I64X2) (:LE_S I64X2) (:GE_S I64X2) (:EXTMUL_LOW_I32X4_S I64X2) (:EXTMUL_HIGH_I32X4_S I64X2) (:EXTMUL_LOW_I32X4_U I64X2) (:EXTMUL_HIGH_I32X4_U I64X2))
;;  ((:ABS          F32X4) (:NEG          F32X4) (:*F32X4 RELAXED_MAX) (:SQRT F32X4) (:ADD F32X4) (:SUB F32X4) (:MUL F32X4) (:DIV F32X4) (:MIN F32X4) (:MAX F32X4) (:PMIN F32X4) (:PMAX F32X4) (:ABS F64X2) (:NEG F64X2) (:*F64X2 RELAXED_MAX) (:SQRT F64X2))
;;  ((:ADD          F64X2) (:SUB          F64X2) (:MUL F64X2) (:DIV F64X2) (:MIN F64X2) (:MAX F64X2) (:PMIN F64X2) (:PMAX F64X2) (:TRUNC_SAT_F32X4_S I32X4) (:TRUNC_SAT_F32X4_U I32X4) (:CONVERT_I32X4_S F32X4) (:CONVERT_I32X4_U F32X4) (:TRUNC_SAT_F64X2_S_ZERO I32X4) (:TRUNC_SAT_F64X2_U_ZERO I32X4) (:CONVERT_LOW_I32X4_S F64X2) (:CONVERT_LOW_I32X4_U F64X2)))

;; (((    ) (#x0      ) (#x1       ) (#x2       ) (#x3        ) (#x4 ) (#x5  ) (#x6  ) (#x7     ) (#x8      ) (#x9       ) (#xA       ) (#xB        ) (#xC ) (#xD  ) (#xE  ) (#xF    ))
;; ((#x00) ()          (:NOP             ) (:BLOCK) (:LOOP) (:IF) (:ELSE) (:*TRY) (:*CATCH))
;; ((#x08) (:*THROW) (:*RETHROW) (:*THROW_REF) (:END) (:BR) (:BR_IF) (:BR_TABLE) (:RETURN))
;; ((#x10) (:CALL            ) (:CALL_INDIRECT   ) (:*RETURN_CALL) (:*RETURN_CALL_INDIRECT) (:*CALL_REF) (:*RETURN_CALL_REF) (:NIL) (:NIL))
;; ((#x18) (:*DELEGATE) (:*CATCH_ALL) (:DROP) (:SELECT) (:*SELECT T) (:NIL) (:NIL) (:*TRY_TABLE))
;; ((#x20) (:LOCAL        GET) (:LOCAL        SET) (:LOCAL TEE) (:GLOBAL GET) (:GLOBAL SET) (:*TABLE GET) (:*TABLE SET) (:NIL))
;; ((#x28) (:LOAD :I32) (:LOAD :I64) (:LOAD :F32) (:LOAD :F64) (:LOAD8_S :I32) (:LOAD8_U :I32) (:LOAD16_S :I32) (:LOAD16_U :I32))
;; ((#x30) (:LOAD8_S     :I64) (:LOAD8_U     :I64) (:LOAD16_S :I64) (:LOAD16_U :I64) (:LOAD32_S :I64) (:LOAD32_U :I64) (:STORE :I32) (:STORE :I64))
;; ((#x38) (:STORE :F32) (:STORE :F64) (:STORE8 :I32) (:STORE16 :I32) (:STORE8 :I64) (:STORE16 :I64) (:STORE32 :I64) (:MEMORY SIZE))
;; ((#x40) (:MEMORY      GROW) (:CONST       :I32) (:CONST :I64) (:CONST :F32) (:CONST :F64) (:EQZ :I32) (:EQ :I32) (:NE :I32))
;; ((#x48) (:LT_S :I32) (:LT_U :I32) (:GT_S :I32) (:GT_U :I32) (:LE_S :I32) (:LE_U :I32) (:GE_S :I32) (:GE_U :I32))
;; ((#x50) (:EQZ         :I64) (:EQ          :I64) (:NE :I64) (:LT_S :I64) (:LT_U :I64) (:GT_S :I64) (:GT_U :I64) (:LE_S :I64))
;; ((#x58) (:LE_U :I64) (:GE_S :I64) (:GE_U :I64) (:EQ :F32) (:NE :F32) (:LT :F32) (:GT :F32) (:LE :F32))
;; ((#x60) (:GE          :F32) (:EQ          :F64) (:NE :F64) (:LT :F64) (:GT :F64) (:LE :F64) (:GE :F64) (:CLZ :I32))
;; ((#x68) (:CTZ :I32) (:POPCNT :I32) (:ADD :I32) (:SUB :I32) (:MUL :I32) (:DIV_S :I32) (:DIV_U :I32) (:REM_S :I32))
;; ((#x70) (:REM_U       :I32) (:AND         :I32) (:OR :I32) (:XOR :I32) (:SHL :I32) (:SHR_S :I32) (:SHR_U :I32) (:ROTL :I32))
;; ((#x78) (:ROTR :I32) (:CLZ :I64) (:CTZ :I64) (:POPCNT :I64) (:ADD :I64) (:SUB :I64) (:MUL :I64) (:DIV_S :I64))
;; ((#x80) (:DIV_U       :I64) (:REM_S       :I64) (:REM_U :I64) (:AND :I64) (:OR :I64) (:XOR :I64) (:SHL :I64) (:SHR_S :I64))
;; ((#x88) (:SHR_U :I64) (:ROTL :I64) (:ROTR :I64) (:ABS :F32) (:NEG :F32) (:CEIL :F32) (:FLOOR :F32) (:TRUNC :F32))
;; ((#x90) (:NEAREST     :F32) (:SQRT        :F32) (:ADD :F32) (:SUB :F32) (:MUL :F32) (:DIV :F32) (:MIN :F32) (:MAX :F32) (:COPYSIGN :F32) (:ABS :F64) (:NEG :F64) (:CEIL :F64) (:FLOOR :F64) (:TRUNC :F64) (:NEAREST :F64) (:SQRT :F64))
;; ((#xA0) (:ADD         :F64) (:SUB         :F64) (:MUL :F64) (:DIV :F64) (:MIN :F64) (:MAX :F64) (:COPYSIGN :F64) (:WRAP_:I64 :I32) (:TRUNC_F32_S :I32) (:TRUNC_F32_U :I32) (:TRUNC_F64_S :I32) (:TRUNC_F64_U :I32) (:EXTEND_I32_S :I64) (:EXTEND_I32_U :I64) (:TRUNC_F32_S :I64) (:TRUNC_F32_U :I64))
;; ((#xB0) (:TRUNC_F64_S :I64) (:TRUNC_F64_U :I64) (:CONVERT_I32_S :F32) (:CONVERT_I32_U :F32) (:CONVERT_:I64_S :F32) (:CONVERT_I64_U :F32) (:DEMOTE_F64 :F32) (:CONVERT_I32_S :F64) (:CONVERT_I32_U :F64) (:CONVERT_I64_S :F64) (:CONVERT_I64_U :F64) (:PROMOTE_F32 :F64) (:REINTERPRET_F32 I32) (:REINTERPRET_F64 :I64) (:REINTERPRET_I32 :F32) (:REINTERPRET_I64 :F64))
;; ((#xC0) (:*I32   EXTEND8_S) (:*I32 EXTEND16_S) (:*:I64 EXTEND8_S) (:*I64 EXTEND16_S) (:*I64 EXTEND32_S) (:NIL) (:NIL) (:NIL) (:NIL) (:NIL) (:NIL) (:NIL) (:NIL) (:NIL) (:NIL) (:NIL))
;; ((#xD0) (:*REF        NULL) (:*REF IS_NULL) (:*REF FUNC) (:*REF AS_NON_NULL) (:*BR_ON_NULL) (:*REF EQ) (:*BR_ON_NON_NULL) (:NIL) (:NIL) (:NIL) (:NIL) (:NIL) (:NIL) (:NIL) (:NIL) (:NIL)))
